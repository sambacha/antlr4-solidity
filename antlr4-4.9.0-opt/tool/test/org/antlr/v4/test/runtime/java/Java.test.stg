IgnoredTests ::= [
	default: false
]

TestFile(file) ::= <<
package org.antlr.v4.test.runtime;

import org.antlr.v4.test.tool.BaseTest;
import org.junit.Ignore;
import org.junit.Test;

import static org.junit.Assert.*;

<if(file.Options.("ImportErrorQueue"))>
import org.antlr.v4.test.tool.ErrorQueue;
<endif>
<if(file.Options.("ImportGrammar"))>
import org.antlr.v4.tool.Grammar;
<endif>

public class Test<file.name> extends BaseTest {

	<file.tests:{test | <test>}; separator="\n", wrap, anchor>

}<\n>
>>

LexerTestMethod(test) ::= <<
<testAnnotations(test)>
public void test<test.name>() throws Exception {
	mkdir(tmpdir);

<test.SlaveGrammars:{grammar |
	String slave_<grammar> =<writeStringLiteral(test.SlaveGrammars.(grammar))>;
	writeFile(tmpdir, "<grammar>.g4", slave_<grammar>);
	}; separator="\n">
<test.Grammar:{grammar |
	<buildStringLiteral(test.Grammar.(grammar), "grammar")>

<if(test.AfterGrammar)>
	<test.AfterGrammar>
<endif>
	String input =<writeStringLiteral(test.Input)>;
	String found = execLexer("<grammar>.g4", grammar, "<grammar><if(test.Options.("CombinedGrammar"))>Lexer<endif>", input, <writeBoolean(test.Options.("ShowDFA"))>);
	assertEquals(<writeStringLiteral(test.Output)>, found);
	<if(!isEmpty.(test.Errors))>
	assertEquals(<writeStringLiteral(test.Errors)>, this.stderrDuringParse);
	<else>
	assertNull(this.stderrDuringParse);
	<endif>
	}>
}

>>

CompositeLexerTestMethod(test) ::= <<
<LexerTestMethod(test)>
>>

ParserTestMethod(test) ::= <<
<testAnnotations(test)>
public void test<test.name>() throws Exception {
	mkdir(tmpdir);

<test.SlaveGrammars:{grammar |
	String slave_<grammar> =<writeStringLiteral(test.SlaveGrammars.(grammar))>;
<if(test.Options.("SlaveIsLexer"))>
	rawGenerateAndBuildRecognizer("<grammar>.g4", slave_<grammar>, null, "<grammar>");
<else>
	writeFile(tmpdir, "<grammar>.g4", slave_<grammar>);
<endif>
	}; separator="\n">
<test.Grammar:{grammar |
	<buildStringLiteral(test.Grammar.(grammar), "grammar")>

	<test.AfterGrammar>

	String input =<writeStringLiteral(test.Input)>;
	String found = execParser("<grammar>.g4", grammar, "<grammar>Parser", "<grammar>Lexer", "<test.Rule>", input, <writeBoolean(test.Options.("Debug"))>);
	assertEquals(<writeStringLiteral(test.Output)>, found);
	<if(!isEmpty.(test.Errors))>
	assertEquals(<writeStringLiteral(test.Errors)>, this.stderrDuringParse);
	<else>
	assertNull(this.stderrDuringParse);
	<endif>
	}>
}

>>

CompositeParserTestMethod(test) ::= <<
<ParserTestMethod(test)>
>>

AbstractParserTestMethod(test) ::= <<
String test<test.name>(String input) throws Exception {
	String grammar = <test.grammar.lines:{ line | "<line>};separator="\\n\" +\n", wrap, anchor>";
	return execParser("<test.grammar.grammarName>.g4", grammar, "<test.grammar.grammarName>Parser", "<test.grammar.grammarName>Lexer", "<test.startRule>", input, <test.debug>);
}

>>

ConcreteParserTestMethod(test) ::= <<
<testAnnotations(test)>
public void test<test.name>() throws Exception {
	String found = test<test.baseName>("<test.input>");
	assertEquals("<test.expectedOutput>", found);
	<if(test.expectedErrors)>
	assertEquals("<test.expectedErrors>", this.stderrDuringParse);
	<else>
	assertNull(this.stderrDuringParse);
	<endif>
}

>>

testAnnotations(test) ::= <%
@Test
<if(test.Options.("Timeout"))>
(timeout = <test.Options.("Timeout")>)
<endif>
<if(test.Options.("Ignore"))>
<\n>@Ignore(<writeStringLiteral(test.Options.("Ignore"))>)
<elseif(IgnoredTests.(({<file.name>.<test.name>})))>
<\n>@Ignore(<writeStringLiteral(IgnoredTests.(({<file.name>.<test.name>})))>)
<endif>
%>

buildStringLiteral(text, variable) ::= <<
StringBuilder <variable>Builder = new StringBuilder(<strlen.(text)>);
<lines.(text):{line|<variable>Builder.append("<escape.(line)>");}; separator="\n">
String <variable> = <variable>Builder.toString();
>>

writeStringLiteral(text) ::= <%
<if(isEmpty.(text))>
""
<else>
<writeLines(lines.(text))>
<endif>
%>

writeLines(textLines) ::= <%
<if(rest(textLines))>
<textLines:{line|
<\n>		"<escape.(line)>}; separator="\" +">"
<else>
"<escape.(first(textLines))>"
<endif>
%>

string(text) ::= <<
"<escape.(text)>"
>>

writeBoolean(o) ::= "<if(o && !isEmpty.(o))>true<else>false<endif>"

writeln(s) ::= <<System.out.println(<s>);>>
write(s) ::= <<System.out.print(<s>);>>
writeList(s) ::= <<System.out.println(<s; separator="+">);>>

False() ::= "false"

True() ::= "true"

Not(v) ::= "!<v>"

Assert(s) ::= <<assert(<s>);>>

Cast(t,v) ::= "((<t>)<v>)"

Append(a,b) ::= "<a> + <b>"

AppendStr(a,b) ::= <%<Append(a,b)>%>

Concat(a,b) ::= "<a><b>"

AssertIsList(v) ::= "List\<?> __ttt__ = <v>;" // just use static type system

AssignLocal(s,v) ::= "<s> = <v>;"

InitIntMember(n,v) ::= <%int <n> = <v>;%>
InitLocalIntMember ::= InitIntMember

InitBooleanMember(n,v) ::= <%boolean <n> = <v>;%>

InitLocalIntVar(n,v) ::= <%<InitLocalIntMember(n,v)>%>

IntArg(n) ::= "int <n>"

VarRef(n) ::= "<n>"

GetMember(n) ::= <%this.<n>%>

SetMember(n,v) ::= <%this.<n> = <v>;%>

AddMember(n,v) ::= <%this.<n> += <v>;%>

MemberEquals(n,v) ::= <%this.<n> == <v>%>

ModMemberEquals(n,m,v) ::= <%this.<n> % <m> == <v>%>

ModMemberNotEquals(n,m,v) ::= <%this.<n> % <m> != <v>%>

DumpDFA() ::= "this.dumpDFA();"

Pass() ::= ""

StringList() ::= "List\<String>"

BuildParseTrees() ::= "setBuildParseTree(true);"

BailErrorStrategy() ::= <%setErrorHandler(new BailErrorStrategy());%>

ToStringTree(s) ::= <%<s>.toStringTree(this)%>

Column() ::= "this.getCharPositionInLine()"

Text() ::= "this.getText()"

ValEquals(a,b) ::= <%<a>==<b>%>

TextEquals(a) ::= <%this.getText().equals("<a>")%>

PlusText(a) ::= <%"<a>" + this.getText()%>

InputText() ::= "this._input.getText()"

LTEquals(i, v) ::= <%this._input.LT(<i>).getText().equals(<v>)%>

LANotEquals(i, v) ::= <%this._input.LA(<i>)!=<v>%>

TokenStartColumnEquals(i) ::= <%this._tokenStartCharPositionInLine==<i>%>

ImportListener(X) ::= ""

ImportVisitor(grammarName) ::= ""

ImportPredictionMode() ::= ""
ImportBailErrorStrategy() ::= ""

GetExpectedTokenNames() ::= "this.getExpectedTokens().toString(this.tokenNames)"

RuleInvocationStack() ::= "getRuleInvocationStack()"

FULL_CONTEXT_DFA() ::= "getInterpreter().enable_global_context_dfa = true;"
LL_EXACT_AMBIG_DETECTION() ::= <<_interp.setPredictionMode(PredictionMode.LL_EXACT_AMBIG_DETECTION);>>

ParserToken(parser, token) ::= <%<parser>.<token>%>

Production(p) ::= <%<p>%>

Result(r) ::= <%<r>%>

ParserPropertyMember() ::= <<
@members {
boolean Property() {
  return true;
}
}
>>

ParserPropertyCall(p, call) ::= "<p>.<call>"

PositionAdjustingLexerDef() ::= ""

PositionAdjustingLexer() ::= <<
@Override
public Token nextToken() {
	if (!(_interp instanceof PositionAdjustingLexerATNSimulator)) {
		_interp = new PositionAdjustingLexerATNSimulator(this, _ATN);
	}

	return super.nextToken();
}

@Override
public Token emit() {
	switch (_type) {
	case TOKENS:
		handleAcceptPositionForKeyword("tokens");
		break;

	case LABEL:
		handleAcceptPositionForIdentifier();
		break;

	default:
		break;
	}

	return super.emit();
}

private boolean handleAcceptPositionForIdentifier() {
	String tokenText = getText();
	int identifierLength = 0;
	while (identifierLength \< tokenText.length() && isIdentifierChar(tokenText.charAt(identifierLength))) {
		identifierLength++;
	}

	if (getInputStream().index() > _tokenStartCharIndex + identifierLength) {
		int offset = identifierLength - 1;
		getInterpreter().resetAcceptPosition(getInputStream(), _tokenStartCharIndex + offset, _tokenStartLine, _tokenStartCharPositionInLine + offset);
		return true;
	}

	return false;
}

private boolean handleAcceptPositionForKeyword(String keyword) {
	if (getInputStream().index() > _tokenStartCharIndex + keyword.length()) {
		int offset = keyword.length() - 1;
		getInterpreter().resetAcceptPosition(getInputStream(), _tokenStartCharIndex + offset, _tokenStartLine, _tokenStartCharPositionInLine + offset);
		return true;
	}

	return false;
}

@Override
public PositionAdjustingLexerATNSimulator getInterpreter() {
	return (PositionAdjustingLexerATNSimulator)super.getInterpreter();
}

private static boolean isIdentifierChar(char c) {
	return Character.isLetterOrDigit(c) || c == '_';
}

protected static class PositionAdjustingLexerATNSimulator extends LexerATNSimulator {

	public PositionAdjustingLexerATNSimulator(Lexer recog, ATN atn) {
		super(recog, atn);
	}

	protected void resetAcceptPosition(CharStream input, int index, int line, int charPositionInLine) {
		input.seek(index);
		this.line = line;
		this.charPositionInLine = charPositionInLine;
		consume(input);
	}

}
>>

BasicListener(X) ::= <<
@parser::members {
public static class LeafListener extends TBaseListener {
	public void visitTerminal(TerminalNode node) {
		System.out.println(node.getSymbol().getText());
	}
}
}
>>

WalkListener(s) ::= <<
ParseTreeWalker walker = new ParseTreeWalker();
walker.walk(new LeafListener(), <s>);
>>

TreeNodeWithAltNumField(X) ::= <<
@parser::members {
public static class MyRuleNode extends ParserRuleContext {
	public int altNum;
	public MyRuleNode(ParserRuleContext parent, int invokingStateNumber) {
		super(parent, invokingStateNumber);
	}
	@Override public int getAltNumber() { return altNum; }
	@Override public void setAltNumber(int altNum) { this.altNum = altNum; }
}
}
>>

TokenGetterListener(X) ::= <<
@parser::members {
public static class LeafListener extends TBaseListener {
	public void exitA(TParser.AContext ctx) {
		if (ctx.getChildCount()==2)
			System.out.printf("%s %s %s",ctx.INT(0).getSymbol().getText(),
				ctx.INT(1).getSymbol().getText(),ctx.INT());
		else
			System.out.println(ctx.ID().getSymbol());
	}
}
}
>>

RuleGetterListener(X) ::= <<
@parser::members {
public static class LeafListener extends TBaseListener {
	public void exitA(TParser.AContext ctx) {
		if (ctx.getChildCount()==2) {
			System.out.printf("%s %s %s",ctx.b(0).start.getText(),
				ctx.b(1).start.getText(),ctx.b().get(0).start.getText());
		} else
			System.out.println(ctx.b(0).start.getText());
	}
}
}
>>

LRListener(X) ::= <<
@parser::members {
public static class LeafListener extends TBaseListener {
	public void exitE(TParser.EContext ctx) {
		if (ctx.getChildCount()==3) {
			System.out.printf("%s %s %s\n",ctx.e(0).start.getText(),
				ctx.e(1).start.getText(), ctx.e().get(0).start.getText());
		} else
			System.out.println(ctx.INT().getSymbol().getText());
	}
}
}
>>

LRWithLabelsListener(X) ::= <<
@parser::members {
public static class LeafListener extends TBaseListener {
	public void exitCall(TParser.CallContext ctx) {
		System.out.printf("%s %s",ctx.e().start.getText(),ctx.eList());
	}
	public void exitInt(TParser.IntContext ctx) {
		System.out.println(ctx.INT().getSymbol().getText());
	}
}
}
>>

WalkVisitor(s) ::= <<
System.out.println(new LeafVisitor().visit(<s>));
>>

TerminalVisitor(grammarName) ::= <<
@parser::members {
	public static class LeafVisitor extends <grammarName>BaseVisitor\<String> {
		@Override
		public String visitTerminal(TerminalNode node) {
			return node.getSymbol().toString() + "\n";
		}

		@Override
		protected String defaultResult() {
			return "";
		}

		@Override
		protected String aggregateResult(String aggregate, String nextResult) {
			return aggregate + nextResult;
		}
	}
}
>>

ErrorVisitor(grammarName) ::= <<
@parser::members {
	public static class LeafVisitor extends <grammarName>BaseVisitor\<String> {
		@Override
		public String visitErrorNode(ErrorNode node) {
			return "Error encountered: " + node.getSymbol();
		}

		@Override
		protected String defaultResult() {
			return "";
		}

		@Override
		protected String aggregateResult(String aggregate, String nextResult) {
			return aggregate + nextResult;
		}
	}
}
>>

ShouldNotVisitEOFVisitor(grammarName) ::= <<
@parser::members {
	public static class LeafVisitor extends <grammarName>BaseVisitor\<String> {
		@Override
		public String visitTerminal(TerminalNode node) {
			return node.getSymbol().toString() + "\n";
		}

		@Override
		protected boolean shouldVisitNextChild(RuleNode node, String currentResult) {
			return currentResult == null || currentResult.isEmpty();
		}
	}
}
>>

ShouldNotVisitTerminalVisitor(grammarName) ::= <<
@parser::members {
	public static class LeafVisitor extends <grammarName>BaseVisitor\<String> {
		@Override
		public String visitTerminal(TerminalNode node) {
			throw new RuntimeException("Should not be reachable");
		}

		@Override
		protected String defaultResult() {
			return "default result";
		}

		@Override
		protected boolean shouldVisitNextChild(RuleNode node, String currentResult) {
			return false;
		}
	}
}
>>

CalculatorVisitor(grammarName) ::= <<
@parser::members {
	public static class LeafVisitor extends <grammarName>BaseVisitor\<Integer> {
		@Override
		public Integer visitS(SContext ctx) {
			return visit(ctx.expr());
		}

		@Override
		public Integer visitNumber(NumberContext ctx) {
			return Integer.valueOf(ctx.INT().getText());
		}

		@Override
		public Integer visitMultiply(MultiplyContext ctx) {
			Integer left = visit(ctx.expr(0));
			Integer right = visit(ctx.expr(1));
			if (ctx.MUL() != null) {
				return left * right;
			}
			else {
				return left / right;
			}
		}

		@Override
		public Integer visitAdd(AddContext ctx) {
			Integer left = visit(ctx.expr(0));
			Integer right = visit(ctx.expr(1));
			if (ctx.ADD() != null) {
				return left + right;
			}
			else {
				return left - right;
			}
		}

		@Override
		protected Integer defaultResult() {
			throw new RuntimeException("Should not be reachable");
		}

		@Override
		protected Integer aggregateResult(Integer aggregate, Integer nextResult) {
			throw new RuntimeException("Should not be reachable");
		}
	}
}
>>

DeclareContextListGettersFunction() ::= <<
void foo() {
	SContext s = null;
	List\<? extends AContext> a = s.a();
	List\<? extends BContext> b = s.b();
}
>>

Declare_foo() ::= <<
	public void foo() {System.out.println("foo");}
>>

Invoke_foo() ::= "foo();"

Declare_pred() ::= <<boolean pred(boolean v) {
	System.out.println("eval="+v);
	return v;
}
>>

Invoke_pred(v) ::= <<this.pred(<v>)>>

ParserTokenType(t) ::= "Parser.<t>"
ContextRuleFunction(ctx, rule) ::= "<ctx>.<rule>"
ContextLabel(ctx, label) ::= "<ctx>.<label>"
StringType() ::= "String"
IntType() ::= "int"
ContextMember(ctx, subctx, member) ::= "<ctx>.<subctx>.<member>"
isEmpty ::= [
	"": true,
	default: false
]
