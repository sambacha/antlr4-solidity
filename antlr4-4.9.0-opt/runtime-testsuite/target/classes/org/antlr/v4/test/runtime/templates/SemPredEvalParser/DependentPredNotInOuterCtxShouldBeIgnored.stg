// uses ID ';' or ID '.' lookahead to solve s. preds not tested.

TestType() ::= "Parser"

Options ::= [
	"Debug": false
]

Grammar ::= [
	"T": {<grammar("T")>}
]

Input() ::= "a;"

Rule() ::= "s"

Output() ::= <<
alt 2<\n>
>>

Errors() ::= ""

grammar(grammarName) ::= <<
grammar <grammarName>;
s : b[2] ';' |  b[2] '.' ; // decision in s drills down to ctx-dependent pred in a;
b[<IntArg("i")>] : a[<VarRef("i")>] ;
a[<IntArg("i")>]
  : {<ValEquals("$i","1")>}? ID {<writeln("\"alt 1\"")>}
    | {<ValEquals("$i","2")>}? ID {<writeln("\"alt 2\"")>}
    ;
ID : 'a'..'z'+ ;
INT : '0'..'9'+;
WS : (' '|'\n') -> skip ;

>>
